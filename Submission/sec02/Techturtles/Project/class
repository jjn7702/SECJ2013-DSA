
class Parcel {
private:
    string trackingNumber, address, nameSender, nameReceiver;
    char category; // 'A' for Bulky & Heavy Delivery, 'B' for Standard Delivery
    int status;    // '0' for Incomplete, '1' for Complete
    string note;

public:
    Parcel(string tn, string a, string nSend, string nRec, char c, int s)
        : trackingNumber(tn), address(a), nameSender(nSend), nameReceiver(nRec), category(c), status(s) {}

    string getTrackingNumber() const {
        return trackingNumber;
    }

    string getAddress() const {
        return address;
    }

    string getSender() const {
        return nameSender;
    }

    string getReceiver() const {
        return nameReceiver;
    }

    char getCategory() const {
        return category;
    }

    int getStatus() const {
        return status;
    }

    void addNoteToParcel(const string& n) {
        note = n;
    }

    void displayDetails(int count) {
        cout << "\t" << left << setw(5) << count
            << setw(15) << trackingNumber
            << setw(30) << address
            << setw(15) << nameSender
            << setw(15) << nameReceiver
            << setw(10);
        displayShippingCategory();
        cout << setw(7) << "\t";
        displayStatusDelivery();
        cout << endl;
        cout << "\t";
        for (int i = 0; i < 120; i++)
        {
            cout << "-";
        }
        cout << endl;

        if (!note.empty()) {
            cout << "\tNote: " << note << endl;
        }
    }

    void displayShippingCategory() {
        if (category == 'A' || category == 'a') {
            cout << "Bulky & Heavy Delivery";
        }
        else
            cout << "Standard Delivery";
    }

    void displayStatusDelivery() {
        if (status == 0) {
            cout << "COMPLETE";
        }
        else
            cout << "INCOMPLETE";
        cout << endl;
    }
};

class ParcelList {
private:
    stack<Parcel*> parcelStack;

public:
    void addNode(Parcel* newParcel) {
        // Add a new parcel to the stack
        parcelStack.push(newParcel);
    }
    void displayAllNodes() {
        if (parcelStack.empty()) {
            cout << "No parcels to display.\n";
            return;
        }

        stack<Parcel*> tempStack = parcelStack;  // Create a temporary stack

        int count = 1;
        while (!tempStack.empty()) {
            Parcel* currentParcel = tempStack.top();
            currentParcel->displayDetails(count);
            tempStack.pop();
            count++;
        }
    }
    void deleteNode() {
        if (!parcelStack.empty()) {
            Parcel* deletedParcel = parcelStack.top();
            parcelStack.pop();
            delete deletedParcel; // Release memory allocated for the deleted parcel
            cout << "Last added parcel deleted.\n";
        }
        else {
            cout << "No parcels to delete.\n";
        }
    }
};
